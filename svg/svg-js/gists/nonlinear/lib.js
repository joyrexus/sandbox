// Generated by CoffeeScript 1.6.3
(function() {
  var Nonlinear,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Nonlinear = (function() {
    function Nonlinear(canvas) {
      this.drawInContext = __bind(this.drawInContext, this);
      this.tick = __bind(this.tick, this);
      this.reset = __bind(this.reset, this);
      this.updateAnimation = __bind(this.updateAnimation, this);
      this.canvas = this.element = canvas;
      this.width = parseInt(canvas.width);
      this.height = parseInt(canvas.height);
      this.ctx = this.canvas.getContext("2d");
      this.plotScale = 50;
      this.plotOffsetX = this.width / 2;
      this.plotOffsetY = this.height / 2;
      this.timeStep = 10e-3;
      this.hasReset = false;
      this.backgroundImage = new Image();
      this.backgroundImage.src = "background.png";
    }

    Nonlinear.prototype.updateAnimation = function() {
      var dt, now;
      now = Date.now();
      dt = 0.001 * (now - (this.lastTimestamp || now));
      this.lastTimestamp = now;
      if (dt === 0) {
        return null;
      }
      if (!this.hasReset) {
        this.reset();
      }
      this.currentTime += dt;
      this.currentTimeModStep += dt;
      while (this.currentTimeModStep > this.timeStep) {
        this.currentTimeModStep -= this.timeStep;
        this.tick(this.timeStep);
      }
      this.drawInContext(this.ctx);
      if (this.currentTime > 18) {
        return this.reset();
      }
    };

    Nonlinear.prototype.reset = function() {
      this.hasReset = true;
      this.currentTime = 0;
      this.currentTimeModStep = 0;
      this.x = -1;
      this.y = 0;
      this.ctx.drawImage(this.backgroundImage, 0, 0);
      this.ctx.closePath();
      this.ctx.lineWidth = 1;
      this.ctx.strokeStyle = "#2392d9";
      this.ctx.beginPath();
      return this.ctx.moveTo(this.x * this.plotScale + this.plotOffsetX, -this.y * this.plotScale + this.plotOffsetY);
    };

    Nonlinear.prototype.tick = function(dt) {
      var dx, dy;
      dx = dt * this.y;
      dy = dt * (-0.5 * this.y - 5 * Math.sin(this.x));
      this.x += dx;
      this.y += dy;
      return this.ctx.lineTo(this.x * this.plotScale + this.plotOffsetX, -this.y * this.plotScale + this.plotOffsetY);
    };

    Nonlinear.prototype.drawInContext = function(ctx) {
      ctx.stroke();
      ctx.closePath();
      ctx.beginPath();
      return ctx.moveTo(this.x * this.plotScale + this.plotOffsetX, -this.y * this.plotScale + this.plotOffsetY);
    };

    return Nonlinear;

  })();

  window.Nonlinear = Nonlinear;

}).call(this);
